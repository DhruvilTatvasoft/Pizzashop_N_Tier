@{
  Layout = "~/Views/Shared/_Sidebar&navbar.cshtml";

  ViewData["Title"] = "Myprofile Page";

}
@model UserDetailModel

<link rel="stylesheet" href="~/css/myprofile.css">

  <div class="container-fluid w-100 h-100 p-0">
    <div id="nav-sidebar"></div>
    <div class="row p-0 h-100 d-flex">
      <div class="content pt-3">
        <div class="mb-4">
          <h1>My Profile</h1>
        </div>
        <div class="form-container shadow">
          <div class="bg-img">
            <img src="~/images/profile_div_bg.jpg" class="profile-icon" style="height:90%;"alt="" />
          </div>
          <div class="d-flex">
            <div class="pfp d-flex align-items-center justify-content-center">
              <img src="@Model.ProfilePath" class="profile-icon" id="profileicon" alt="" style="object-fit: cover; border-radius: 50%;" />
            </div>
           <div class="row fileUploadRow me-1 ms-1 mb-3">
            <div class="d-flex flex-column justify-content-start">
              <h2>Admin</h2>
              <h2 class="Username">@Model.username</h2>
            </div>
          </div>

          <div>
            <form class=" pe-3 pb-3 d-flex flex-column" method="Post" asp-controller="Dashboard" style="width:97%" asp-action="updateProfile" enctype="multipart/form-data">
            <div class=" d-flex align-items-center justify-content-center camera-icon-container ">
              <input type="file" asp-for="profilePicPath" id="fileUpload1" hidden onchange="changeprofilepic()">
                                            <div class="row d-flex justify-content-center">
                                                <label for="fileUpload1" class="fileUploadLabel d-flex">
                                                    <img src="~/images/photo-camera-interface-symbol-for-button.png"
                                                        id="profilepic">
                                                </label>
                                            </div>
            </div>
              <div class="form-group w-100">
                <div>
                  <div class="row">
                    <div class="form-floating mb-2 col-6">
                      <input type="text" class="form-control pb-1" id="floatingInput" placeholder="name@example.com"
                        asp-for="firstname"  />
                        <span asp-validation-for="firstname" class="mb-4 text-danger invalidmsg"></span>
                      <label for="floatingInput">First Name</label>
                    </div>
                    <div class="form-floating mb-2 col-6">
                      <input type="text" class="form-control" id="floatingInput" asp-for="lastname" ,
                        placeholder="name@example.com" />
                        <span asp-validation-for="lastname" class="mb-4 text-danger invalidmsg"></span>
                      <label for="floatingInput">Last name</label>
                    </div>
                  </div>
                  <div class="row">
                    <div class="form-floating mb-2 col-6">
                      <input type="text" class="form-control col-6" id="floatingInput" asp-for="username" ,
                        placeholder="name@example.com" />
                        <span asp-validation-for="username" class="mb-4 text-danger invalidmsg"></span>
                      <label for="floatingInput">User Name</label>
                    </div>
                    <div class="form-floating mb-2 col-6">
                      <input type="tel" class="form-control col-6" id="floatingInput" asp-for="Phone" ,
                        placeholder="name@example.com" />
                        <span asp-validation-for="Phone" class="mb-4 text-danger invalidmsg"></span>
                      <label for="floatingInput">Phone</label>
                    </div>
                  </div>
                  <div class="row mb-2">
                    <div class="form-floating col-4">
                      <select class="form-select"  id="countryid" asp-for="countryid" 
                                                aria-label="Floating label select example">
                                                @foreach (var item in Model.Country)
                                                {
                                                    <option value="@item.Countryid">@item.Countryname</option>
                                                }
                                            </select>
                      <label for="floatingSelect">Country</label>
                        <span asp-validation-for="countryid" class="mb-4 text-danger invalidmsg"></span>
                    </div>
                    <div class="form-floating col-4">
                      <select class="form-select" id="stateid" asp-for="stateid"
                                                aria-label="Floating label select example">
                                                <option value="">select state </option>
                                            </select>
                      <label for="floatingSelect">State</label>
                        <span asp-validation-for="stateid" class="mb-4 text-danger invalidmsg"></span>
                    </div>
                    <div class="form-floating col-4">
                      <select class="form-select" aria-label="Floating label select example" id="cityid"asp-for="cityid">
                                                <option value="">select city</option>
                                            </select>
                                            <label for="floatingSelect">City</label>
                        <span asp-validation-for="cityid" class="mb-4 text-danger invalidmsg"></span>
                    </div>
                    
                  </div>

                  <div class="row">
                    <div class="form-floating mb-3 col-8">
                      <input type="text" class="form-control" asp-for="address" , id="floatingInput"
                        placeholder="name@example.com" />
                      <label for="floatingInput">Address</label>
                        <span asp-validation-for="address" class="mb-4 text-danger invalidmsg"></span>
                    </div>
                    <div class="form-floating mb-3 col-4">
                      <input type="number" class="form-control" id="floatingInput" asp-for="Zipcode" ,
                        placeholder="name@example.com" />
                      <label for="floatingInput">Zipcode</label>
                        <span asp-validation-for="Zipcode" class="mb-4 text-danger invalidmsg"></span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary me-2">
                  Update
                </button>
                <button type="submit" class="btn btn-outline-primary">
                 <a asp-action="ShowDashboard" asp-controller="Dashboard" style="text-decoration: none;">Cancel</a>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
       
      function changeprofilepic(){
        let input = document.querySelector("#fileUpload1").files[0];
        document.querySelector("#profileicon").src = "/images/"+input.name;
        console.log(input);
      }

       $(document).ready(function () {
        // Retrieve preselected values from the model, if any (useful when re-rendering after validation errors)
        var selectedCountry = $('#countryid').value;
        var selectedState = '@Model.stateid';
        var selectedCity = '@Model.cityid';
       
        // If a country is already selected, load corresponding States and Cities
        if (selectedCountry) {
            // AJAX call to get the list of States for the selected Country
            $.getJSON('@Url.Action("GetStates")', { countryid: selectedCountry }, function (states) {
                
                //Get the State Dropdown which needs to be populated
                var statesSelect = $('#stateid');
                
                // Clear any existing options
                statesSelect.empty();
                
                // Add a default option prompting user selection
                statesSelect.append('<option value="">Select State</option>');
                
                // Populate the dropdown with retrieved states
                // The index parameter represents the current iteration number (or position) in the array being iterated over.
                $.each(states, function (index, state) {
                    // 'index' holds the current iteration number (0, 1, 2, ...)
                    // 'state' is the current state object
                    // In this code, index is not used directly, but it's available if needed.
                    var option = $('<option/>', {
                        value: state.value,
                        text: state.text
                    });
                    // If the state matches the preselected state, mark it as selected
                    if (state.value == selectedState) {
                        option.prop('selected', true);
                    }
                    statesSelect.append(option);
                });
                // If a state was preselected, load its corresponding Cities
                if (selectedState) {
                    // AJAX call to get the list of Cities for the selected State
                    $.getJSON('@Url.Action("GetCities")', { stateid: selectedState }, function (cities) {
                        
                        //Get the City Dropdown which needs to be populated
                        var citiesSelect = $('#cityid');
                        
                        // Clear any existing options
                        citiesSelect.empty();
                        // Add a default option prompting user selection
                        citiesSelect.append('<option value="">Select City</option>');
                        // Populate the dropdown with retrieved cities
                        // The index parameter represents the current iteration number (or position) in the array being iterated over.
                        $.each(cities, function (index, city) {
                            var option = $('<option/>', {
                                value: city.value,
                                text: city.text
                            });
                            // If the city matches the preselected city, mark it as selected
                            if (city.value == selectedCity) {
                                option.prop('selected', true);
                            }
                            citiesSelect.append(option);
                        });
                    });
                }
            });
        }
        // Event handler: When the Country dropdown changes
        $('#countryid').change(function () {
            //Get the Selected Country Dropdown Value
            var countryid = $(this).val();
            console.log(countryid);
            // AJAX call to load States based on the selected Country
            $.getJSON('@Url.Action("GetStates")', { countryid: countryid }, function (states) {
                 console.log("hello");
                //Get the State Dropdown which needs to be populated
                var statesSelect = $('#stateid');
                // Clear the States dropdown
                statesSelect.empty();
                // Add a default option prompting user selection
                statesSelect.append('<option value="">Select State</option>');
                
                // Populate with new state options
                // The index parameter represents the current iteration number (or position) in the array being iterated over.
                $.each(states, function (index, state) {
                    statesSelect.append($('<option/>', {
                        value: state.value,
                        text: state.text
                    }));
                });
                // Clear the Cities dropdown as the State selection has changed
                $('#cityid').empty().append('<option value="">Select City</option>');
            });
        });
        // Event handler: When the State dropdown changes
        $('#stateid').change(function () {
            //Get the Selected State Dropdown Value
            var stateid = $(this).val();
            // AJAX call to load Cities based on the selected State
            $.getJSON('@Url.Action("GetCities")', { stateid: stateid }, function (cities) {
                
                //Get the City Dropdown which needs to be populated
                var citiesSelect = $('#cityid');
                // Clear the Cities dropdown
                citiesSelect.empty();
                // Add a default option prompting user selection
                citiesSelect.append('<option value="">Select City</option>');
                
                $.each(cities, function (index, city) {
                    citiesSelect.append($('<option/>', {
                        value: city.value,
                        text: city.text
                    }));
                });
            });
        });
    });

    
</script>
